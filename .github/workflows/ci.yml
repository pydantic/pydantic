name: ci

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  test-cpython:
    name: test ${{ matrix.python-version }} rust ${{ matrix.rust-toolchain }}
    strategy:
      fail-fast: false
      matrix:
        rust-toolchain:
          - nightly
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        include:
          - rust-toolchain: stable
            python-version: '3.10'

    runs-on: ubuntu-latest

    env:
      PYTHON: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain

      - name: install rust ${{ matrix.rust-toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}

      - id: cache-rust
        name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: v5

      - run: cargo install rustfilt coverage-prepare
        if: steps.cache-rust.outputs.cache-hit != 'true'

      - run: rustup component add llvm-tools-preview

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - id: cache-py
        name: cache python
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: >
            py-v2
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('tests/requirements.txt') }}
            ${{ hashFiles('pyproject.toml') }}

      - run: pip install -r tests/requirements.txt
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip install -e .
        env:
          RUST_BACKTRACE: 1
          RUSTFLAGS: '-C instrument-coverage'

      - run: pip freeze

      - run: make test
        env:
          BENCHMARK_VS_PYDANTIC: 1
          HYPOTHESIS_PROFILE: slow

      - run: ls -lha
      - run: coverage xml

      - run: coverage-prepare lcov pydantic_core/*.so

      - uses: codecov/codecov-action@v3
        if: matrix.rust-toolchain == 'nightly'
        with:
          env_vars: PYTHON

  # See https://github.com/PyO3/pyo3/discussions/2781
  # tests intermittently segfault with pypy when using `coverage run ...`, hence separate job
  test-pypy:
    name: test ${{ matrix.python-version }} rust stable
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 'pypy3.7'
          - 'pypy3.8'
          - 'pypy3.9'

    runs-on: ubuntu-latest

    env:
      PYTHON: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: pypy-v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - id: cache-py
        name: cache python
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: >
            py
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('tests/requirements.txt') }}
            ${{ hashFiles('pyproject.toml') }}

      - run: pip install -r tests/requirements.txt
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip install -e .
        env:
          RUST_BACKTRACE: 1

      - run: pip freeze

      - run: pytest

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain
      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: cache rust
        uses: Swatinem/rust-cache@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # used to lint js code
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: actions/cache@v3
        id: cache-py
        name: cache python
        with:
          path: ${{ env.pythonLocation }}
          key: >
            py
            ${{ env.pythonLocation }}
            ${{ hashFiles('tests/requirements-linting.txt') }}
            ${{ hashFiles('pyproject.toml') }}

      - run: pip install -r tests/requirements-linting.txt
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip install .
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip freeze

      - run: make lint
      - run: make pyright

      - run: npm install
      - run: npm run lint

  bench:
    # run the rust benchmarks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain
      - name: install rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: cache rust
        uses: Swatinem/rust-cache@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - run: pip install typing_extensions
      - run: make rust-benchmark

  build-wasm-emscripten:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
          targets: wasm32-unknown-emscripten

      - name: cache rust
        uses: Swatinem/rust-cache@v2

      - uses: mymindstorm/setup-emsdk@v11
        with:
          # NOTE!: as per https://github.com/pydantic/pydantic-core/pull/149 this version needs to match the version
          # in node_modules/pyodide/repodata.json, to get the version, run:
          # `cat node_modules/pyodide/repodata.json | python -m json.tool | rg platform`
          version: '3.1.27'
          actions-cache-folder: emsdk-cache

      - run: pip install 'maturin>=0.13,<0.15' 'black>=22.3.0,<23' typing_extensions

      - name: build wheels
        run: make build-wasm

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm install

      - run: npm run test

      - uses: actions/upload-artifact@v3
        with:
          name: wasm_wheels
          path: dist

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [test-cpython, test-pypy, lint, bench, build-wasm-emscripten]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  build:
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    # only run on push to main and on release
    if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build'))"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: windows
            ls: dir
            target: i686
            python-architecture: x86
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: macos
            target: aarch64
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: ubuntu
            platform: linux
            target: i686
          # GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic
          # we use manylinux_2_24 container for aarch64 and armv7 targets instead,
          - os: ubuntu
            platform: linux
            target: aarch64
            container: messense/manylinux_2_24-cross:aarch64
          - os: ubuntu
            platform: linux
            target: armv7
            container: messense/manylinux_2_24-cross:armv7
            interpreter: 3.7 3.8 3.9 3.10 3.11
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: ppc64le
            container: messense/manylinux_2_24-cross:ppc64le
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: ubuntu
            platform: linux
            target: s390x
            container: messense/manylinux_2_24-cross:s390x
            interpreter: 3.7 3.8 3.9 3.10 3.11
        exclude:
          # Windows on arm64 only supports Python 3.11+
          - os: windows
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions
      # generate self-schema now, so we don't have to do so inside docker in maturin build
      - run: python generate_self_schema.py

      - name: build sdist
        if: ${{ matrix.os == 'ubuntu' && matrix.target == 'x86_64' && matrix.manylinux == 'auto' }}
        uses: messense/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable

      - name: build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.7 3.8 3.9 3.10 3.11 pypy3.7 pypy3.8 pypy3.9' }}
          rust-toolchain: stable

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: twine check dist/*

      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  inspect-pypi-assets:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: list dist files
        run: |
         ls -lh dist/
         echo "`ls dist | wc -l` files"

      - name: extract and list sdist file
        run: |
         mkdir sdist-files
         tar -xvf dist/*.tar.gz -C sdist-files
         tree -a sdist-files

      - name: extract and list wheel file
        run: |
         ls dist/*cp310-manylinux*x86_64.whl | head -n 1
         python -m zipfile --list `ls dist/*cp310-manylinux*x86_64.whl | head -n 1`

  test-builds-arch:
    name: test build on ${{ matrix.target }}-${{ matrix.distro }}
    needs: [build]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [aarch64, armv7, s390x]
        distro: ['ubuntu22.04']
        include:
          - target: aarch64
            distro: alpine_latest

    steps:
      - uses: actions/checkout@v3

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - uses: uraimo/run-on-arch-action@v2.5.0
        if: matrix.distro == 'ubuntu22.04'
        name: Install & test on Ubuntu
        with:
          arch: ${{ matrix.target }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
          run: |
            rm -r pydantic_core
            pip install -U pip typing-extensions
            pip install -r tests/requirements.txt
            pip install pydantic-core --no-index --no-deps --find-links dist --force-reinstall
            pytest

      - uses: uraimo/run-on-arch-action@v2.5.0
        if: matrix.distro == 'alpine_latest'
        name: Install & test on Alpine
        with:
          arch: ${{ matrix.target }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            apk update
            apk add python3 py3-pip
          run: |
            rm -r pydantic_core
            pip install -U pip typing-extensions
            pip install -r tests/requirements.txt
            pip install pydantic-core --no-index --no-deps --find-links dist --force-reinstall
            pytest

  test-builds-os:
    name: test build on ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: rm -r pydantic_core
      - run: pip install -U pip typing-extensions
      - run: pip install -r tests/requirements.txt
      - run: pip install pydantic-core --no-index --no-deps --find-links dist --force-reinstall
      - run: pytest

  release:
    needs: [test-builds-arch, test-builds-os, check]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - run: pip install -U twine

      - name: check package version
        run: python .github/check_version.py

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}

      - name: get wasm dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm_wheels
          path: wasm

      - name: upload to github release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            wasm/*.whl
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
