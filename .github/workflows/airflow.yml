# This workflow is a daily cron job, inspired by:
# https://github.com/python/typing_extensions/blob/main/.github/workflows/third_party.yml.
# Running the tests of various third-party libraries that use Pydantic. This helps us spot regressions early, and helps
# flag when third-party libraries are making incorrect assumptions that might cause them to break when we cut a new release.
name: Airflow - experiment third-party tests

on:
  schedule:
    - cron: '0 12 * * *' # Daily at midnight UTC
  pull_request:
    branches: [main]
  # Can be manually triggered from the Actions tab, if needed:
  workflow_dispatch:
  push:
    branches: [third-party-airflow]

permissions:
  contents: read

env:
  # https://github.com/pytest-dev/pytest/issues/7443#issuecomment-656642591:
  FORCE_COLOR: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-info:
    name: "Build info"
    # At build-info stage we do not yet have outputs so we need to hard-code the runs-on to public runners
    runs-on: ["ubuntu-22.04"]
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    outputs:
      all-python-versions-list-as-string: >-
        ${{ steps.selective-checks.outputs.all-python-versions-list-as-string }}
      basic-checks-only: ${{ steps.selective-checks.outputs.basic-checks-only }}
      build-job-description: ${{ steps.source-run-info.outputs.build-job-description }}
      canary-run: ${{ steps.source-run-info.outputs.canary-run }}
      chicken-egg-providers: ${{ steps.selective-checks.outputs.chicken-egg-providers }}
      ci-image-build: ${{ steps.selective-checks.outputs.ci-image-build }}
      core-test-types-list-as-string: >-
        ${{ steps.selective-checks.outputs.core-test-types-list-as-string }}
      debug-resources: ${{ steps.selective-checks.outputs.debug-resources }}
      default-branch: ${{ steps.selective-checks.outputs.default-branch }}
      default-constraints-branch: ${{ steps.selective-checks.outputs.default-constraints-branch }}
      default-helm-version: ${{ steps.selective-checks.outputs.default-helm-version }}
      default-kind-version: ${{ steps.selective-checks.outputs.default-kind-version }}
      default-kubernetes-version: ${{ steps.selective-checks.outputs.default-kubernetes-version }}
      default-mysql-version: ${{ steps.selective-checks.outputs.default-mysql-version }}
      default-postgres-version: ${{ steps.selective-checks.outputs.default-postgres-version }}
      default-python-version: ${{ steps.selective-checks.outputs.default-python-version }}
      disable-airflow-repo-cache: ${{ steps.selective-checks.outputs.disable-airflow-repo-cache }}
      docker-cache: ${{ steps.selective-checks.outputs.docker-cache }}
      docs-build: ${{ steps.selective-checks.outputs.docs-build }}
      docs-list-as-string: ${{ steps.selective-checks.outputs.docs-list-as-string }}
      excluded-providers-as-string: ${{ steps.selective-checks.outputs.excluded-providers-as-string }}
      force-pip: ${{ steps.selective-checks.outputs.force-pip }}
      full-tests-needed: ${{ steps.selective-checks.outputs.full-tests-needed }}
      has-migrations: ${{ steps.selective-checks.outputs.has-migrations }}
      helm-test-packages: ${{ steps.selective-checks.outputs.helm-test-packages }}
      image-tag: ${{ github.event.pull_request.head.sha || github.sha }}
      in-workflow-build: ${{ steps.source-run-info.outputs.in-workflow-build }}
      include-success-outputs: ${{ steps.selective-checks.outputs.include-success-outputs }}
      individual-providers-test-types-list-as-string: >-
        ${{ steps.selective-checks.outputs.individual-providers-test-types-list-as-string }}
      is-airflow-runner: ${{ steps.selective-checks.outputs.is-airflow-runner }}
      is-amd-runner: ${{ steps.selective-checks.outputs.is-amd-runner }}
      is-arm-runner: ${{ steps.selective-checks.outputs.is-arm-runner }}
      is-k8s-runner: ${{ steps.selective-checks.outputs.is-k8s-runner }}
      is-self-hosted-runner: ${{ steps.selective-checks.outputs.is-self-hosted-runner }}
      is-vm-runner: ${{ steps.selective-checks.outputs.is-vm-runner }}
      kubernetes-combos-list-as-string: >-
        ${{ steps.selective-checks.outputs.kubernetes-combos-list-as-string }}
      kubernetes-versions-list-as-string: >-
        ${{ steps.selective-checks.outputs.kubernetes-versions-list-as-string }}
      latest-versions-only: ${{ steps.selective-checks.outputs.latest-versions-only }}
      mypy-checks: ${{ steps.selective-checks.outputs.mypy-checks }}
      mysql-exclude: ${{ steps.selective-checks.outputs.mysql-exclude }}
      mysql-versions: ${{ steps.selective-checks.outputs.mysql-versions }}
      needs-api-codegen: ${{ steps.selective-checks.outputs.needs-api-codegen }}
      needs-api-tests: ${{ steps.selective-checks.outputs.needs-api-tests }}
      needs-helm-tests: ${{ steps.selective-checks.outputs.needs-helm-tests }}
      needs-mypy: ${{ steps.selective-checks.outputs.needs-mypy }}
      only-new-ui-files: ${{ steps.selective-checks.outputs.only-new-ui-files }}
      postgres-exclude: ${{ steps.selective-checks.outputs.postgres-exclude }}
      postgres-versions: ${{ steps.selective-checks.outputs.postgres-versions }}
      prod-image-build: ${{ steps.selective-checks.outputs.prod-image-build }}
      # yamllint disable rule:line-length
      providers-compatibility-tests-matrix: ${{ steps.selective-checks.outputs.providers-compatibility-tests-matrix }}
      providers-test-types-list-as-string: >-
        ${{ steps.selective-checks.outputs.providers-test-types-list-as-string }}
      pull-request-labels: ${{ steps.source-run-info.outputs.pr-labels }}
      python-versions-list-as-string: ${{ steps.selective-checks.outputs.python-versions-list-as-string }}
      python-versions: ${{ steps.selective-checks.outputs.python-versions }}
      run-amazon-tests: ${{ steps.selective-checks.outputs.run-amazon-tests }}
      run-coverage: ${{ steps.source-run-info.outputs.run-coverage }}
      run-kubernetes-tests: ${{ steps.selective-checks.outputs.run-kubernetes-tests }}
      run-task-sdk-tests: ${{ steps.selective-checks.outputs.run-task-sdk-tests }}
      run-system-tests: ${{ steps.selective-checks.outputs.run-system-tests }}
      run-tests: ${{ steps.selective-checks.outputs.run-tests }}
      run-ui-tests: ${{ steps.selective-checks.outputs.run-ui-tests }}
      run-www-tests: ${{ steps.selective-checks.outputs.run-www-tests }}
      runs-on-as-json-default: ${{ steps.selective-checks.outputs.runs-on-as-json-default }}
      runs-on-as-json-docs-build: ${{ steps.selective-checks.outputs.runs-on-as-json-docs-build }}
      runs-on-as-json-public: ${{ steps.selective-checks.outputs.runs-on-as-json-public }}
      runs-on-as-json-self-hosted-asf: ${{ steps.selective-checks.outputs.runs-on-as-json-self-hosted-asf }}
      runs-on-as-json-self-hosted: ${{ steps.selective-checks.outputs.runs-on-as-json-self-hosted }}
      selected-providers-list-as-string: >-
        ${{ steps.selective-checks.outputs.selected-providers-list-as-string }}
      skip-pre-commits: ${{ steps.selective-checks.outputs.skip-pre-commits }}
      skip-providers-tests: ${{ steps.selective-checks.outputs.skip-providers-tests }}
      source-head-repo: ${{ steps.source-run-info.outputs.source-head-repo }}
      sqlite-exclude: ${{ steps.selective-checks.outputs.sqlite-exclude }}
      test-groups: ${{ steps.selective-checks.outputs.test-groups }}
      testable-core-integrations: ${{ steps.selective-checks.outputs.testable-core-integrations }}
      testable-providers-integrations: ${{ steps.selective-checks.outputs.testable-providers-integrations }}
      upgrade-to-newer-dependencies: ${{ steps.selective-checks.outputs.upgrade-to-newer-dependencies }}
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Cleanup docker"
        run: ./scripts/ci/cleanup_docker.sh
      - name: Fetch incoming commit ${{ github.sha }} with its parent
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 2
          persist-credentials: false
      - name: "Install Breeze"
        uses: ./.github/actions/breeze
      - name: "Get information about the Workflow"
        id: source-run-info
        run: breeze ci get-workflow-info 2>> ${GITHUB_OUTPUT}
        env:
          SKIP_BREEZE_SELF_UPGRADE_CHECK: "true"
      - name: Selective checks
        id: selective-checks
        env:
          PR_LABELS: "${{ steps.source-run-info.outputs.pr-labels }}"
          COMMIT_REF: "${{ github.sha }}"
          VERBOSE: "false"

        run: breeze ci selective-check 2>> ${GITHUB_OUTPUT}
      - name: env
        run: printenv
        env:
          PR_LABELS: ${{ steps.source-run-info.outputs.pr-labels }}
          GITHUB_CONTEXT: ${{ toJson(github) }}

  test-airflow:
    name: Test Airflow (main branch) on Python ${{ matrix.python-version }}
    # If 'schedule' was the trigger, don't run it on contributors' forks
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'schedule' && github.repository == 'pydantic/pydantic') ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'third-party-tests'))

    needs: [build-info]

    runs-on: ${{ fromJSON(needs.build-info.outputs.runs-on-as-json-public) }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - name: "Cleanup repo"
      shell: bash
      run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"

    - name: Checkout Airflow
      uses: actions/checkout@v4
      with:
        repository: airflow/airflow
        # Need to fetch all history for selective checks tests
        fetch-depth: 0
        persist-credentials: false

    - name: "Cleanup docker"
      run: ./scripts/ci/cleanup_docker.sh

    - name: Checkout Pydantic
      uses: actions/checkout@v4
      with:
        path: pydantic-latest

    - uses: actions/setup-python@v5
      with:
        python-version: "${{ matrix.python-version }}"
        cache: 'pip'
        cache-dependency-path: ./dev/breeze/pyproject.toml

    - name: Install breeze airflow
      run: pip install --editable ./dev/breeze/

    - name: Install pydantic
      run: pip install ./pydantic-latest

    - name: List installed dependencies
      run: pip list

    - name: Run basic test
      run: python -m pytest -n auto --color=yes
      working-directory: ./dev/breeze/

  create-issue-on-failure:
    name: Create an issue if tests failed
    runs-on: ubuntu-latest
    needs:
      - test-airflow
    if: |
      github.repository == 'pydantic/pydantic' &&
      github.event_name == 'schedule' &&
      needs.test-airflow.result == 'failure
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: 'pydantic',
              repo: 'pydantic',
              title: `Third-party tests failed on ${new Date().toDateString()}`,
              body: 'Run listed here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
            })
