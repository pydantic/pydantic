24: error: Unexpected keyword argument "z" for "Model"  [call-arg]
25: error: Missing named argument "y" for "Model"  [call-arg]
26: error: Property "y" defined in "Model" is read-only  [misc]
27: error: "Model" does not have orm_mode=True  [pydantic-orm]
36: error: Unexpected keyword argument "x" for "ForbidExtraModel"  [call-arg]
47: error: Unexpected keyword argument "x" for "ForbidExtraModel2"  [call-arg]
53: error: Invalid value for "Config.extra"  [pydantic-config]
58: error: Invalid value for "Config.orm_mode"  [pydantic-config]
63: error: Invalid value for "Config.orm_mode"  [pydantic-config]
74: error: Incompatible types in assignment (expression has type "ellipsis", variable has type "int")  [assignment]
87: error: Missing named argument "a" for "DefaultTestingModel"  [call-arg]
87: error: Missing named argument "b" for "DefaultTestingModel"  [call-arg]
87: error: Missing named argument "c" for "DefaultTestingModel"  [call-arg]
87: error: Missing named argument "d" for "DefaultTestingModel"  [call-arg]
87: error: Missing named argument "e" for "DefaultTestingModel"  [call-arg]
91: error: Name "Undefined" is not defined  [name-defined]
94: error: Missing named argument "undefined" for "UndefinedAnnotationModel"  [call-arg]
101: error: Missing named argument "y" for "construct" of "Model"  [call-arg]
103: error: Argument "x" to "construct" of "Model" has incompatible type "str"; expected "int"  [arg-type]
156: error: Missing named argument "x" for "DynamicAliasModel2"  [call-arg]
175: error: Unused "type: ignore" comment
182: error: Unused "type: ignore" comment
189: error: Name "Missing" is not defined  [name-defined]
197: error: No overload variant of "dataclass" matches argument type "Dict[<nothing>, <nothing>]"  [call-overload]
197: note: Possible overload variants:
197: note:     def dataclass(*, init: bool = ..., repr: bool = ..., eq: bool = ..., order: bool = ..., unsafe_hash: bool = ..., frozen: bool = ..., config: Optional[Type[Any]] = ...) -> Callable[[Type[Any]], Type[Dataclass]]
197: note:     def dataclass(_cls: Type[Any], *, init: bool = ..., repr: bool = ..., eq: bool = ..., order: bool = ..., unsafe_hash: bool = ..., frozen: bool = ..., config: Optional[Type[Any]] = ...) -> Type[Dataclass]
219: error: Property "y" defined in "FrozenModel" is read-only  [misc]